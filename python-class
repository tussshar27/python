class Car:
    capacity = '1000cc'              #class variable/attribute
    def __init__(self, a, b):   #constructor
        self._a = a             #making attrinbute a as protected by single _
                                #use double __ for making attribute private
        self.b = b
        
    def my_func(self):
        return f'Brand: {self._a}, model: {self.b} and abc: {self.capacity}'
        
    @staticmethod
    def car_description():
        return f'Car Information with engine capacity: {Car.capacity}'         #accessing static variable inside static method
        
class Bike(Car):
    def __init__(self, a, b, c):
        super().__init__(a, b)      #super()
        self.c = c
        
    def my_func(self):
        return f'Brand: {self._a}, model: {self.b}, EngineType: {self.c}'
        
my_car = Car('Mercedes Benz','S Class')
print(my_car.my_func())
        
my_bike = Bike('Ducati', 'Panigale', 'V4')
print(my_bike.my_func())

print(Car.capacity)
print(Car.car_description())

output:
Brand: Mercedes Benz, model: S Class and abc: 1000cc
Brand: Ducati, model: Panigale, EngineType: V4
1000cc
Car Information with engine capacity: 1000cc

=== Code Execution Successful ===
